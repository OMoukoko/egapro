---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: backup-cron
spec:
  schedule: "0 */1 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup-cron
            image: postgres:11-alpine
            command: ["/bin/bash"]
            args:
              - -c
              - |
                export TIMESTAMP=$(date "+%Y-%m-%d_%H-%M-%S");
                echo "starting to backup. TIMESTAMP=${TIMESTAMP}"
                export FILENAME=egapro_$TIMESTAMP.dump;
                export RESTORE_PG_HOST=egapro-prod-pg-postgresql

                # DUMP
                pg_dumpall -c -h ${RESTORE_PG_HOST} -U egapro > /tmp/${FILENAME};
                echo "pg_dumpall terminated"

                # COMPUTE MD5
                md5_backup=$(md5sum /tmp/${FILENAME} | awk '{print $1}');
                echo ${md5_backup} > /tmp/${FILENAME}.md5;
                echo "md5sum terminated $(cat /tmp/${FILENAME}.md5)"

                # COMPRESS BACKUP
                tar -cvzf /tmp/${FILENAME}.tgz /tmp/${FILENAME} /tmp/${FILENAME}.md5

                # COPY FROM LOCAL PATH TO AZURE FILE SHARE
                mv /tmp/${FILENAME}.tgz /data/${FILENAME}.tgz;
                mv /tmp/${FILENAME}.md5 /data/${FILENAME}.md5;
                mv /tmp/${FILENAME} /data/${FILENAME};
                echo "backup files move terminated";
                echo "${FILENAME}" > /data/LATEST;
                echo "LATEST file is now ${FILENAME}"

                # RESTORE ON CO_LOCATED POSTGRES CONTAINER FROM AZURE FILE
                echo "try to restore dump in co-located container";
                mkdir /tmp/${TIMESTAMP}
                cd /tmp/${TIMESTAMP}
                tar -xvf /data/${FILENAME}.tgz

                psql -U ${POSTGRES_USER} -h $(hostname) -f /data/${FILENAME} > /tmp/restore.logs 2>&1;
                echo "psql restore complete with status code $(echo $?)";

                # SEARCH FOR ERROR ON RESTORE FROM AZURE FILE
                grep 'ERROR:  extra data after last expected column' /tmp/restore.logs | wc -l;
                exit_code=$(grep 'ERROR:  extra data after last expected column' /tmp/restore.logs | wc -l);
                echo "exit code=${exit_code}"

                # FLUSH IO WRITE
                sync;

                # PRINT RESULTS
                echo "md5sum on local file : ${md5_backup}"
                echo "md5sum after copy : $(md5sum /data/${FILENAME} | awk '{print $1}')"
                echo "backup ${FILENAME} completed. md5sum of file is $(cat /data/${FILENAME}.md5)";

                exit ${exit_code}
            resources:
              requests:
                cpu: 200m
                memory: 200Mi
              limits:
                cpu: 400m
                memory: 400Mi
            env:
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: egapro
                    key: POSTGRES_EGAPRO_PASSWORD
            volumeMounts:
              - mountPath: "/data"
                name: volume
          - name: postgres-restore
            image: postgres:11-alpine
            env:
              - name: POSTGRES_USER
                value: postgres
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: egapro
                    key: POSTGRES_EGAPRO_PASSWORD
            resources:
              requests:
                cpu: 200m
                memory: 200Mi
              limits:
                cpu: 400m
                memory: 400Mi
          restartPolicy: OnFailure
          volumes:
            - name: volume
              azureFile:
                secretName: azure-storage
                shareName: egapro-backup-restore
                readOnly: false
          initContainers:
            - name: wait-for-postgres
              image: postgres:11-alpine
              imagePullPolicy: Always
              resources:
                requests:
                  cpu: 5m
                  memory: 16Mi
                limits:
                  cpu: 20m
                  memory: 32Mi
              command:
                - sh
                - -c
                - |
                  retry=120; # 5s * (12 * 10) = 10min
                  while ! pg_isready -h egapro-prod-pg-postgresql > /dev/null 2> /dev/null && [[ $(( retry-- )) -gt 0 ]];
                    do
                      echo "Waiting for Postgres to go Green ($(( retry )))" ; sleep 5s ; done ;
                  echo Ready;
...
